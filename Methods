package problem358;
import java.util.*;

public class Solution {
	public String rearrangeString(String str, int k){
		if(k==0)	return str;
		int length=str.length();
		int[] count=new int[26];
		//valid stores the minimum index (position) in the final result for each of the 26 characters;
		int[] valid=new int[26];
		for(char c:str.toCharArray()){
			count[c-'a']++;
		}
		StringBuilder sb=new StringBuilder();
		for(int index=0;index<length;index++){
			int candidatePos=findValidMax(count,valid,index);
			if(candidatePos==-1) return "";
			count[candidatePos]--;
			//update the valid index for the character at candidatePos;
			//It is the most left position the character can take;
			valid[candidatePos]=index+k;
			sb.append((char)('a'+candidatePos));
		}
		return sb.toString();
	}
	private int findValidMax(int[] count, int[] valid, int index){
		int max=Integer.MIN_VALUE;
		int candidatePos=-1;
		for(int i=0;i<count.length;i++){
			if(count[i]>0&&count[i]>max&&index>=valid[i]){
				max=count[i];
				candidatePos=i;
			}
		}
		return candidatePos;
	}
	public String rearrangeStringII(String str, int k){
		StringBuilder rearranged=new StringBuilder();
		Map<Character, Integer> map=new HashMap<>();
		
		for(char c:str.toCharArray()){
			map.put(c, map.getOrDefault(c, 0)+1);
		}
		/*
		 PriorityQueue<Map.Entry<Character, Integer>> pq = 
		 new PriorityQueue<>((x, y) -> Integer.compare(y.getValue(), x.getValue()));
		 */
		Queue<Map.Entry<Character, Integer>> maxHeap = new PriorityQueue<>(new Comparator<Map.Entry<Character, Integer>>() {
            public int compare(Map.Entry<Character, Integer> entry1, Map.Entry<Character, Integer> entry2) {
                return entry2.getValue() - entry1.getValue();
            }
        });
		
		 Queue<Map.Entry<Character, Integer>> waitQueue = new LinkedList<>();
	     maxHeap.addAll(map.entrySet());
	     
	     while(!maxHeap.isEmpty()){
	    	 Map.Entry<Character, Integer> current=maxHeap.poll();
	    	 rearranged.append(current.getKey());
	    	 current.setValue(current.getValue()-1);
	    	 
	    	 waitQueue.offer(current);
	            
	         if (waitQueue.size() < k) { // intial k-1 chars, waitQueue not full yet
	                continue;
	         }
	         // release from waitQueue if char is already k apart
	         Map.Entry<Character, Integer> front = waitQueue.poll();
	        
	         if (front.getValue() > 0) {
	                maxHeap.offer(front);
	         }
	     }
	     return rearranged.length() == str.length() ? rearranged.toString() : "";
	}
	
	public String rearrangeStringIII(String str, int k){
		StringBuilder res=new StringBuilder();
		Map<Character, Integer> map=new HashMap<>();
		int len=str.length();
		for(char c:str.toCharArray()){
			map.put(c, map.getOrDefault(c, 0)+1);
		}
		/*
		 PriorityQueue<Map.Entry<Character, Integer>> pq = 
		 new PriorityQueue<>((x, y) -> Integer.compare(y.getValue(), x.getValue()));
		 */
		Queue<Map.Entry<Character, Integer>> maxHeap = new PriorityQueue<>(new Comparator<Map.Entry<Character, Integer>>() {
            public int compare(Map.Entry<Character, Integer> entry1, Map.Entry<Character, Integer> entry2) {
                return entry2.getValue() - entry1.getValue();
            }
        });
		
	     maxHeap.addAll(map.entrySet());
	     
	     while(!maxHeap.isEmpty()){
	    	 List<Map.Entry<Character, Integer>> list = new LinkedList<>();
	    	 int count=Math.min(k, len);
	    	 for(int i=0;i<count;i++){
	    		 if(maxHeap.isEmpty()){
	    			 return "";
	    		 }
	    		 Map.Entry<Character, Integer> cur=maxHeap.poll();
	    		 res.append(cur.getKey());
	    		 cur.setValue(cur.getValue()-1);
	    		 if(cur.getValue()>0){
	    			 list.add(cur);
	    		 }
	    		 len--;
	    	 }
	    	 for(Map.Entry<Character, Integer> cur:list) {
	    		 maxHeap.offer(cur);
	    	 }
	     }
	     return res.toString();
	}
}
